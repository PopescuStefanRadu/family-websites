<?php
/**
 * @file
 * Code for the Publication feature.
 */

include_once 'cms_publication.features.inc';
include_once DRUPAL_ROOT . '/includes/iso.inc';

define('ROLE_MANAGE_PUBLICATION', 'manage publication');

define('VOC_PUBLICATION_TYPES', 'publication_types');
define('VOC_PUBLICATION_AUTHORS', 'publication_authors');
define('FILTER_PUBLICATION_INSTRUMENT_FILTER', 'field_instrument_target_id');

/**
 * Implements hook_menu_local_tasks_alter();
 *
 * Show 'Create publication' button on Publicaiton listing view
 *
 * @param   array   $data
 * @param   array   $router_item
 * @param   string  $root_path
 */
function cms_publication_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    switch($root_path){
        case CMSPublication::$bundle . '/listing':
            $item = menu_get_item('node/add/' . CMSPublication::$bundle);
            $item['title'] = t('Create ' . CMSPublication::$bundle);
            if ($item['access']) {
                $data['actions']['output'][] = array(
                    '#theme' => 'menu_local_action',
                    '#link' => $item,
                );
            }
            break;
    }
}

/**
 * Implementes hook_theme($existing, $type, $theme, $path)
 */
function cms_publication_theme($existing, $type, $theme, $path) {
    $base = array(
        'file' => 'theme.inc',
        'path' => $path . '/theme',
    );

    return array(
        'table__publications_template_instrument' => $base + array(
                'variables' => array(
                    'header' => NULL,
                    'rows' => NULL,
                    'attributes' => array(),
                    'caption' => NULL,
                    'colgroups' => array(),
                    'sticky' => TRUE,
                    'empty' => '',
                    'settings' => array(),
                ),
            ),
    );
}

function cms_publication_views_default_views_alter(&$views) {
    if (isset($views['publications_admin'])) {
        $handler = &$views['publications_admin'];
        $roles = user_roles();
        $rids = array();
        foreach($roles as $rid => $role) {
            if($role == 'authenticated user') {
                $rids[$rid] = $rid;
            }
        }
        $handler->display['default']->display_options['access']['type'] = 'role';
        $handler->display['default']->display_options['access']['role'] = array_filter($rids);
    }
    return $views;
}

/**
 * Implements hook_node_view($node, $view_mode, $langcode)
 */
function cms_publication_node_view($node, $view_mode, $langcode) {
    if(function_exists('cms_manage_node_access') && $node->type == CMSPublication::$bundle) {
        cms_manage_node_access($node);
    }

    switch ($node->type) {
        case 'country':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'publications_admin', 'country_publications');
                } else if (is_theme_frontend()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'front_end_publications', 'country_publications');
                }
            }
            break;
        case 'document':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'publications_admin', 'document_publications');
                } else if (is_theme_frontend()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'front_end_publications', 'document_publications');
                }
            }
            break;
        case 'legal_instrument':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'publications_admin', 'instrument_publications');
                } else if (is_theme_frontend()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'front_end_publications', 'instrument_publications');
                }
            }
            break;
        case 'meeting':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'publications_admin', 'meeting_publications');
                } else if (is_theme_frontend()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'front_end_publications', 'meeting_publications');
                }
            }
            break;
        case 'project':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'publications_admin', 'project_publications');
                } else if (is_theme_frontend()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'front_end_publications', 'project_publications');
                }
            }
            break;
        case 'publication':
            break;
        case 'species':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'publications_admin', 'species_publications');
                } else if (is_theme_frontend()) {
                    //Set related data used in template
                    CMSBase::set_related_content_from_views($node, 'publications', 'front_end_publications', 'species_publications');
                }
            }
            break;
    }

}

/**
 * Implements hook_form_alter().
 */
function cms_publication_form_alter(&$form, &$form_state, $form_id) {
    switch ($form_id) {
        case 'publication_node_form' :
            $breadcrumb = array();
            $breadcrumb[] = l(t('Home'), '<front>');
            $breadcrumb[] = l(t('Publications'), 'publication/listing');
            if (isset($form['nid']) && (is_numeric($form['nid']['#value']))) {
                $breadcrumb[] = l($form['#node']->title, 'node/' . $form['#node']->nid);
            }

            drupal_set_breadcrumb($breadcrumb);
            break;
        /**
         * Alter dropdowns from exposed filter to support graceful degradation
         */
        case 'views_exposed_form':
            break;
        case 'node_delete_confirm':
            if ($form['#node']->type == 'publication') {
                $form['#submit'][] = '_publication_redirect_after_delete';
            }
            break;
    }

    return $form;
}

function _publication_redirect_after_delete(&$form, &$form_state) {
    $form_state['redirect'] = 'publication/listing';
}

/**
 * Implements hook_field_extra_fields()
 *
 * @return mixed Extra fields information
 */
function cms_publication_field_extra_fields() {
    $extra['node'][CMSPublication::$bundle_instrument_module]['display'] = array(
        'publications' => array(
            'label' => t('Publications'),
            'description' => t('Injects into CMS Instrument content type the list of publications for the CMS Instrument'),
            'weight' => 100,
        ),
    );
    return $extra;
}

/**
 * This class contains various utility functions related to publication
 * module that can be reused in other parts of the project.
 */
class CMSPublication extends CMSBase {

    static $bundle = 'publication';

    static $bundle_instrument_module = 'legal_instrument';
    static $field_publications_instrument = 'publications';
    static $false_related_fields = array(
        'field_publication_plans' => 'document',
        'field_publication_nat_report' => 'document',
    );

    static $related_fields = array(
        'species' => 'field_publication_species',
        'meeting' => 'field_publication_meeting',
        'project' => 'field_publication_project',
    );

    static $taxonomic_fields = array(
        array(
            'field_name' => 'field_publication_language',
            'vocabulary' => VOC_LANGUAGES,
        ),
        array(
            'field_name' => 'field_publication_type',
            'vocabulary' => VOC_PUBLICATION_TYPES,
        ),
        array(
            'field_name' => 'field_publication_author',
            'vocabulary' => VOC_PUBLICATION_AUTHORS,
        ),
        array(
            'field_name' => 'field_publication_co_authors',
            'vocabulary' => VOC_PUBLICATION_AUTHORS,
        ),
        array(
            'field_name' => 'field_region',
            'vocabulary' => VOC_REGION,
        ),
        array(
            'field_name' => 'field_threats',
            'vocabulary' => VOC_THREATS,
        ),
    );

    /**
     * Create a new CMS Publication node instance. Name is taken from publication module.
     *
     * @param bool $save If TRUE, object is saved into database
     * @return stdClass The node object initialized
     */
    static function node_create($title, $save = TRUE) {
        global $user;
        $node = new stdClass();
        $node->type = 'publication';
        node_object_prepare($node);
        $node->title = $title;
        $node->language = CMSUtils::get_default_language();
        $node->status = 1;
        $node->uid = $user->uid;
        $node->changed = $_SERVER['REQUEST_TIME'];
        $node->created = $_SERVER['REQUEST_TIME'];

        $node = node_submit($node);
        if($save) {
            node_save($node);
        }
        return $node;
    }


    /**
     * Set the legal instruments for a node
     *
     * @param stdClass $node Reference to the node to update
     * @param array $data Data to get information from (ex. JSON). Must contain key field_instrument
     * @param type $cache_instruments (Optional) Pre-cached data with Legal instruments as array 'name' => nid.
     */
    public static function set_instruments(&$node, $data, $cache_instruments = array()) {
        $node->field_instrument[$node->language] = array();
        if(!empty($data['field_instrument'])) {
            if(empty($cache_instruments)) {
                $cache_instruments = CMSLegalInstrument::get_mapped_instruments();
            }

            $instruments = array();
            foreach($data['field_instrument'] as $instrument_name) {
                if(array_key_exists($instrument_name, $cache_instruments)) {
                    $instruments[] = $cache_instruments[$instrument_name];
                } else {
                    echo error_log("CMSPublication::set_instruments(): Could not find instrument $instrument_name\n");
                }
            }
            CMSUtils::set_node_list_value($node, 'field_instrument', $instruments, 'target_id');
        }
    }


    /**
     * Retrieve the instrument names from a node
     *
     * @param stdClass $node Drupal publicatio node
     * @param array $instrument_cache (Optional) Instrument cache (id | name) to avoid query for each call
     * @return array Array of strings with instrument names
     */
    public static function get_instruments($node, $instrument_cache = array()) {
        $ret = array();
        $instruments = CMSUtils::get_node_list_value($node, 'field_instrument', 'target_id');
        if(!empty($instruments)) {
            if(empty($instrument_cache)) {
                $instrument_cache = CMSLegalInstrument::get_mapped_instruments($title_as_key = FALSE);
            }
            foreach($instruments as $id) {
                if(array_key_exists($id, $instrument_cache)) {
                    $ret[] = $instrument_cache[$id];
                } else {
                    error_log("CMSPublication::get_instruments(): Instrument with id: $id does not exist!");
                }
            }
        }
        return $ret;
    }


    /**
     * Set the country for a publication
     *
     * @param stdClass $node Reference to the node to update
     * @param array $data Data to get information from (ex. JSON). Must contain key field_country
     * @param array $cache_countries (Optional) Pre-cached data with CMS countries arr array 'name' => 'iso2l'.
     */
    public static function set_country(&$node, $data, $cache_countries = array()) {
        self::set_field_country($node, 'field_country', $data);
    }


    /**
     * Set the language for a publication
     *
     * @param stdClass $node Reference to the node to update
     * @param array $data Data to get information from (ex. JSON). Must contsin key field_publication_language
     */
    public static function set_language(&$node, $data, $field_name = 'field_publication_language') {
        if(!empty($data[$field_name])) {
            foreach($data[$field_name] as $language_name) {
                $language = CMSUtils::vocabulary_get_or_create_term($language_name, 'languages');
                if(!empty($language)) {
                    $node->{$field_name}[$node->language][]['tid'] = $language->tid;
                }
            }
        }
    }


    /**
     * Retrieve the language for a publication
     *
     * @param stdClass $node Drupal publication node
     * @return String with language name
     */
    public static function get_language($node, $field_name = 'field_publication_language') {
        $ret = array();

        $languages = CMSUtils::get_node_list_value($node, $field_name, 'tid', $node->language);
        if(!empty($languages)) {
            $languages = taxonomy_term_load_multiple($languages);
            foreach($languages as $term) {
                $ret[] = $term->name;
            }
        }

        return $ret;
    }


    /**
     * Set the author for a publication
     *
     * @param stdClass $node Reference to the node to update
     * @param array $data Data to get information from (ex. JSON). Must contain key field_publication_authors as array
     * @param string $field_name Actual field to update. Can be field_publication_author or field_publication_co_authors
     */
    public static function set_authors(&$node, $data, $field_name = 'field_publication_author') {
        if(!empty($data[$field_name])) {
            foreach($data[$field_name] as $author_name) {
                $author = CMSUtils::vocabulary_get_or_create_term($author_name, 'publication_authors');
                if(!empty($author)) {
                    $node->{$field_name}[$node->language][]['tid'] = $author->tid;
                }
            }
        }
    }


    /**
     * Retrieve node authors as array of strings
     *
     * @param stdClass $node Node class to extract data
     * @param string $field_name Name of the authors field. Possible values: field_publication_author or field_publication_co_author
     * @return array Array of strings with authors names
     */
    public static function get_authors($node, $field_name = 'field_publication_author') {
        $ret = array();
        $authors = CMSUtils::get_node_list_value($node, $field_name, 'tid', $node->language);
        if(!empty($authors)) {
            $authors = taxonomy_term_load_multiple($authors);
            foreach($authors as $term) {
                $ret[] = $term->name;
            }
        }
        return $ret;
    }


    /**
     * Set the body property of the publication (node)
     *
     * @param stdClass $node Reference to the node to update
     * @param array $data Data to get information from (ex. JSON). Must contain key body. Under the body there are some properties like
     * <code>
     * {
     *      "body" => {
     *          "value" => "Sample text",
     *          "format" => "full_html",
     *          "summary" => "Sample summary"
     *      }
     * }
     * </code>
     */
    public static function set_body(&$node, $data) {
        $node->body[$node->language][0]['value'] = '';
        if(!empty($data['body'])) {
            $body = $data['body'];
            if(!empty($body['value'])) {
                $node->body[$node->language][0]['value'] = $body['value'];
            }
            if(!empty($body['format'])) {
                $node->body[$node->language][0]['format'] = $body['format'];
            }
            if(!empty($body['summary'])) {
                $node->body[$node->language][0]['summary'] = $body['summary'];
            }
        }
    }


    /**
     * Set the source property (link) of the publication (node).
     *
     * @param stdClass $node Reference to the node to update
     * @param array $data Data to get information from (ex. JSON). Must contain key field_publication_source. Under the body there are some properties like
     * <code>
     * {
     *      "field_publication_source" => {
     *          "url" => "http://www.google.com/",
     *          "title" => "Sample title"
     *      }
     * }
     * </code>
     */
    public static function set_source(&$node, $data) {
        if(!empty($data['field_publication_source'])) {
            $source = $data['field_publication_source'];
            if(!empty($source['url'])) {
                $node->field_publication_source[$node->language][0]['url'] = $source['url'];
            }
            if(!empty($source['title'])) {
                $node->field_publication_source[$node->language][0]['title'] = $source['title'];
            }
        }
    }


    /**
     * Retrieve the source property from a publication node
     *
     * @param stdClass $node Drupal node
     * @return Array with keys 'url' and 'title'
     */
    public static function get_source($node) {
        $ret = array();
        if(!empty($node->field_publication_source[$node->language][0])) {
            $source = $node->field_publication_source[$node->language][0];
            if(!empty($source['url'])) {
                $ret['url'] = $source['url'];
            }
            if(!empty($source['title'])) {
                $ret['title'] = $source['title'];
            }
        }
        return $ret;
    }


    /**
     * Retrieve field_publication_order_code node property
     *
     * @param mixed Array with values as strings
     */
    public static function get_order_code($node) {
        $ret = array();
        if(!empty($node->field_publication_order_code[$node->language])
            && is_array($node->field_publication_order_code[$node->language])) {
            foreach($node->field_publication_order_code[$node->language] as $property) {
                $ret[] = $property['value'];
            }
        }
        return $ret;
    }

    /**
     * Function to get published date as a string
     * It returns the date from field type partial_date (provided by partial_date module)
     *
     * @param $node
     *
     * @return bool|string
     *
     * @author Dragos Dumitrescu
     */

    public static function get_published_date($node) {
        $date = "";
        if(isset($node->field_publication_published_date[$node->language][0])) {
            $month = $node->field_publication_published_date[$node->language][0]['from']['month'];
            $year = $node->field_publication_published_date[$node->language][0]['from']['year'];
            $date = date('Y-m-d', strtotime($year .'-'. $month .'-01'));
        }
        return $date;
    }

    /**
     * Function to set published date
     * Sets the date for field type partial_date (provided by partial_date module)
     * Backwards compatibility for field name field_publication_published
     *
     * @param $node
     * @param $data
     *
     * @author Dragos Dumitrescu
     */
    public function set_published_date(&$node, $data) {
        if (isset($data['field_publication_published_date'])) {
            $date_field = 'field_publication_published_date';
        } else if (isset($data['field_publication_published'])) {
            $date_field = 'field_publication_published';
        } else {
            return;
        }

        if (!empty($data[$date_field])) {
            $node->field_publication_published_date[$node->language][0]['from']['year'] = date('Y', strtotime($data[$date_field]));
            $node->field_publication_published_date[$node->language][0]['from']['month'] = date('m', strtotime($data[$date_field]));
        }
        return;
    }

    /**
     * Create a new publication from an array with instrument properties.
     * Data may come from JSON or other sources, encoded as array:
     * {
     *      'title' => 'test',
     *      ...
     * }
     *
     * @param array $data Array with object properties
     * @return object Drupal node
     * @see CMSPublication::set_instruments
     * @see CMSPublication::set_country
     */
    public static function from_array($data, $basedir = '') {
        $ret = NULL;
        if(empty($data['title'])) {
            error_log('CMSPublication::from_array(): Cannot import publication without title');
            return $ret;
        }
        $node = CMSPublication::node_create($data['title'], FALSE);
        if (!empty($data['uuid'])) {
            $node->uuid = $data['uuid'];
        }
        if (isset($data['status']) && in_array($data['status'],array(0,1))) {
            $node->status = $data['status'];
        }
        //self::set_field_single_value($node, $data, 'body');
        self::set_field_list_value($node, 'field_publication_order_code', $data);
        self::set_field_single_value($node, 'field_publication_city', $data);
        self::set_field_single_value($node, 'field_publication_edition', $data);
        self::set_field_single_value($node, 'field_publication_publisher', $data);
        self::set_published_date($node, $data);

        CMSBase::import_field_files($node, 'field_publication_attachment', $data, CMSPublication::$bundle, $basedir);
        CMSBase::import_field_files($node, 'field_publication_image', $data, CMSPublication::$bundle, $basedir);
        self::set_field_body($node, $data);
        self::set_source($node, $data);
        self::set_field_instruments($node, 'field_instrument', $data);

        CMSPublication::set_country($node, $data);

        self::set_content_taxonomic_fields($node, CMSPublication::$taxonomic_fields, $data);

        foreach(self::$related_fields as $field_name) {
            self::set_entity_reference_by_uuid($node, $field_name, $data);
        }
        foreach(self::$false_related_fields as $field_name => $type) {
            self::set_entity_reference_by_uuid($node, $field_name, $data);
        }

        return $node;
    }


    /**
     * Build an array from the publication node to be saved as JSON string
     *
     * @param stdClass $node Drupal publication node
     * @param string $export_base_dir Path to directory where attached files (fields field_publication_attachment and field_publication_image) will be exported
     * @param array $instrument_cache (Optional) Dictonary with instrumet cache (id|name) - to avoid multiple queries when exporting. If empty, will query instruments
     * @return mixed Dictionary with publication fields
     */
    public static function to_array($node, $export_base_dir, $instrument_cache = array()) {
        if(empty($node->title)) {
            error_log("CMSPublication::to_array() Cannot export publication without title. Aborting ...\n");
            return array();
        }
        $ret = array(
            'title' => $node->title,
            'status' => $node->status,
            'uuid' => CMSUtils::get_node_uuid($node)
        );
        self::get_field_list_value($node, 'field_publication_order_code', $ret);
        self::get_field_single_value($node, 'field_publication_city', $ret);
        self::get_field_single_value($node, 'field_publication_edition', $ret);
        self::get_field_single_value($node, 'field_publication_publisher', $ret);
        $ret['field_publication_published_date'] = self::get_published_date($node);

        $ret['field_publication_attachment'] = self::export_field_files($node, 'field_publication_attachment', $export_base_dir);
        $ret['field_publication_image'] = self::export_field_files($node, 'field_publication_image', $export_base_dir);
        self::get_field_body($node, $ret);
        $ret['field_publication_source'] = self::get_source($node);
        $ret['field_instrument'] = self::get_instruments($node, $instrument_cache);
        $ret['field_country'] = self::get_field_country_code($node, 'field_country');
        $ret['field_publication_language'] = self::get_field_taxonomic_terms_names($node, 'field_publication_language', VOC_LANGUAGES);
        $ret['field_publication_type'] = self::get_field_taxonomic_terms_names($node, 'field_publication_type', VOC_PUBLICATION_TYPES);
        $ret['field_publication_author'] = self::get_field_taxonomic_terms_names($node, 'field_publication_author', VOC_PUBLICATION_AUTHORS);
        $ret['field_publication_co_authors'] = self::get_field_taxonomic_terms_names($node, 'field_publication_co_authors', VOC_PUBLICATION_AUTHORS);
        $ret['field_region'] = self::get_field_taxonomic_terms_names($node, 'field_region', VOC_REGION);
        $ret['field_threats'] = self::get_field_taxonomic_terms_names($node, 'field_threats', VOC_THREATS);

        foreach(self::$related_fields as $field_name) {
            $ret[$field_name] = self::get_entity_reference_by_uuid($node, $field_name);
        }
        foreach(self::$false_related_fields as $field_name => $type) {
            $ret[$field_name] = self::get_entity_reference_by_uuid($node, $field_name);
        }

        return $ret;
    }



    /**
     * Create new role if it doesn't exists already.
     *
     * @param string $machine_name Role machine name
     * @return boolean TRUE if role exists or was successfully created/touched
     */
    static function role_create($machine_name) {
        $ret = FALSE;
        $existing = user_roles();
        if(!in_array($machine_name, $existing)) {
            $role = new stdClass();
            $role->name = $machine_name;
            $ret = user_role_save($role);
            if($ret === FALSE) {
                watchdog($machine_name, "Failed to create role @role", array("@role" => $machine_name), WATCHDOG_ERROR);
            } else {
                $ret = TRUE;
            }
        } else {
            $ret = TRUE;
        }
        return $ret;
    }


    /**
     * Create new root vocabulary (no parent).
     * Doesn't need testing as is covered by the Drupal core
     *
     * @param string $name
     * @param string $machine_name
     * @return integer Same as taxonomy_vocabulary_save
     */
    static function vocabulary_create($name, $machine_name) {
        $voc = new stdClass();
        $voc->name = $name;
        $voc->machine_name = $machine_name;
        $voc->hierarchy = 0;
        return taxonomy_vocabulary_save($voc);
    }

    public static function get_publications_for_content_type($nid, $field) {
        $ret = array();
        if(!is_numeric($nid)) {
            watchdog('publication', 'get_publications_for_content_type() - $nid is not an integer, returning empty result');
            return $ret;
        }
        $query = new EntityFieldQuery();
        $query = $query
            ->entityCondition('entity_type', 'node')
            ->propertyCondition('type', self::$bundle)
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition($field, 'target_id', $nid, '=')
            ->execute();
        if(!empty($query['node'])) {
            $ret = node_load_multiple(array_keys($query['node']));
        }
        return $ret;
    }
}
